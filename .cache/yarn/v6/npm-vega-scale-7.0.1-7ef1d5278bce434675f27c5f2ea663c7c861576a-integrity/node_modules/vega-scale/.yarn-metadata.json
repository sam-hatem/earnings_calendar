{
  "manifest": {
    "name": "vega-scale",
    "version": "7.0.1",
    "description": "Scales and color schemes for visual encoding.",
    "keywords": [
      "vega",
      "scale",
      "color",
      "palette"
    ],
    "license": "BSD-3-Clause",
    "author": {
      "name": "Jeffrey Heer",
      "url": "http://idl.cs.washington.edu"
    },
    "main": "build/vega-scale.js",
    "module": "index",
    "types": "index.d.ts",
    "repository": {
      "type": "git",
      "url": "https://github.com/vega/vega.git"
    },
    "scripts": {
      "rollup": "rollup -g d3-array:d3,d3-interpolate:d3,d3-scale:d3,vega-time:vega,vega-util:vega -f umd -n vega -o build/vega-scale.js -- index.js",
      "prebuild": "rimraf build && mkdir build",
      "build": "yarn rollup",
      "postbuild": "terser build/vega-scale.js -c -m -o build/vega-scale.min.js",
      "pretest": "yarn prebuild && yarn rollup",
      "test": "tape 'test/**/*-test.js'",
      "prepublishOnly": "yarn test && yarn build",
      "postpublish": "git push && git push --tags"
    },
    "dependencies": {
      "d3-array": "^2.5.1",
      "d3-interpolate": "^1.4.0",
      "d3-scale": "^3.2.1",
      "vega-time": "^2.0.2",
      "vega-util": "^1.15.0"
    },
    "gitHead": "28db83352e43e321dfe55fc5cb6489b211e45662",
    "_registry": "npm",
    "_loc": "/home/jovyan/.cache/yarn/v6/npm-vega-scale-7.0.1-7ef1d5278bce434675f27c5f2ea663c7c861576a-integrity/node_modules/vega-scale/package.json",
    "readmeFilename": "README.md",
    "readme": "# vega-scale\n\nScales and color schemes for visual encoding.\n\nThis pacakge provides [scale](#scale) and [scheme](#scheme) methods for managing scale mappings and color schemes. By default, the scale and scheme registries include all scale types and color schemes provided by the [d3-scale](https://github.com/d3/d3-scale) and [d3-scale-chromatic](https://github.com/d3/d3-scale-chromatic) modules.\n\nThis module also provides augmented implementations of `'band'`, `'point'`, and `'sequential'` scales in order to provide improved layout and inversion support for band/point scales, and multi-domain and color range array support for sequential scales.\n\n## API Reference\n\n<a name=\"scale\" href=\"#scale\">#</a>\nvega.<b>scale</b>(<i>type</i>[, <i>scale</i>, <i>metadata</i>])\n[<>](https://github.com/vega/vega/blob/master/packages/vega-scale/src/scales.js \"Source\")\n\nRegistry function for adding and accessing scale constructor functions. The *type* argument is a String indicating the name of the scale type. If the *scale* argument is not specified, this method returns the matching scale constructor in the registry, or `null` if not found. If the *scale* argument is provided, it must be a scale constructor function to add to the registry under the given *type* name.\n\nThe *metadata* argument provides additional information to guide appropriate use of scales within Vega. The *metadata* can be either a string or string array. The valid string values are:\n\n* `\"continuous\"` - the scale is defined over a continuous-valued domain.\n* `\"discrete\"` - the scale is defined over a discrete domain and range.\n* `\"discretizing\"` - the scale discretizes a continuous domain to a discrete range.\n* `\"interpolating\"` - the scale range is defined using a color interpolator.\n* `\"log\"` - the scale performs a logarithmic transform of the continuous domain.\n* `\"temporal\"` - the scale domain is defined over date-time values.\n\nBy default, the scale registry includes entries for all scale types provided by the [d3-scale](https://github.com/d3/d3-scale) module. Scales created using the constructor returned by this method have an additional `type` property indicating the scale type. All scales supporting either an `invert` or `invertExtent` method are augmented with an additional `invertRange` function that returns an array of corresponding domain values for a given interval in the scale's output range.\n\n```js\n// linear scale\nvar linear = vega.scale('linear');\nvar scale = linear().domain([0, 10]).range([0, 100]);\nscale.type; // 'linear'\nscale.invertRange([0, 100]); // [0, 10]\n```\n\n```js\nvar ordinal = vega.scale('ordinal');\n\n// ordinal scale\nvar scale1 = ordinal().domain(['a', 'b', 'c']).range([0, 1, 2]);\nscale1.type; // 'ordinal'\n\n// ordinal scale with range set to the 'category20' color palette\nvar scale2 = ordinal().range(vega.scheme('category20'));\n```\n\n```js\nvar seq = vega.scale('sequential');\n\n// sequential scale, using the plasma color palette\nvar scale1 = seq().interpolator(vega.scheme('plasma'));\nscale1.type; // 'sequential'\n```\n\n<a name=\"scheme\" href=\"#scheme\">#</a>\nvega.<b>scheme</b>(<i>name</i>[, <i>scheme</i>])\n[<>](https://github.com/vega/vega/blob/master/packages/vega-scale/src/schemes.js \"Source\")\n\nRegistry function for adding and accessing color schemes. The *name* argument is a String indicating the name of the color scheme. If the *scheme* argument is not specified, this method returns the matching scheme value in the registry, or `null` if not found. If the *scheme* argument is provided, it must be a valid color array or [interpolator](https://github.com/d3/d3-scale#sequential_interpolator) to add to the registry under the given *name*.\n\nBy default, the scheme registry includes entries for all scheme types provided by the\n[d3-scale-chromatic](https://github.com/d3/d3-scale-chromatic) module. Valid schemes are either arrays of color values (e.g., applicable to `'ordinal'` scales) or [interpolator](https://github.com/d3/d3-scale#sequential_interpolator) functions (e.g., applicable to `'sequential'` scales.)\n\n<a name=\"interpolate\" href=\"#interpolate\">#</a>\nvega.<b>interpolate</b>(<i>name</i>[, <i>gamma</i>])\n[<>](https://github.com/vega/vega/blob/master/packages/vega-scale/src/interpolate.js \"Source\")\n\nReturns the D3 interpolator factory with the given *name* and optional *gamma*. All interpolator types provided by the [d3-interpolate](https://github.com/d3/d3-interpolate) module are supported. However, Vega uses hyphenated rather than camelCase names.\n\n```js\nvar rgbBasis = vega.interpolate('rgb-basis'); // d3.interpolateRgbBasis\nvar rgbGamma = vega.interpolate('rgb', 2.2);  // d3.interpolateRgb.gamma(2.2)\n```\n\n<a name=\"interpolateColors\" href=\"#interpolateColors\">#</a>\nvega.<b>interpolateColors</b>(<i>colors</i>[, <i>type</i>, <i>gamma</i>])\n[<>](https://github.com/vega/vega/blob/master/packages/vega-scale/src/interpolate.js \"Source\")\n\nGiven an array of discrete *colors*, returns an interpolator function that maps the domain [0, 1] to a continuous spectrum of colors using piecewise linear interpolation. The optional parameters *type* and *gamma* specify an interpolation type (default `\"rgb\"`) and gamma correction (default `1`) supported by the [interpolate](#interpolate) method.\n\n<a name=\"interpolateRange\" href=\"#interpolateRange\">#</a>\nvega.<b>interpolateRange</b>(<i>interpolator</i>, <i>range</i>])\n[<>](https://github.com/vega/vega/blob/master/packages/vega-scale/src/interpolate.js \"Source\")\n\nGiven a D3 *interpolator* instance, return a new interpolator with a modified interpolation *range*. The *range* argument should be a two element array whose entries lie in the range [0, 1]. This method is convenient for transforming the range of values over which interpolation is performed.\n\n```js\nvar number = d3.interpolateNumber(0, 10);\nnumber(0);   // 0\nnumber(0.5); // 5\nnumber(1);   // 10\n\nvar range = vega.interpolateRange(number, [0.2, 0.8]);\nrange(0);   // 2\nrange(0.5); // 5\nrange(1);   // 8\n```\n\n<a name=\"quantizeInterpolator\" href=\"#quantizeInterpolator\">#</a>\nvega.<b>quantizeInterpolator</b>(<i>interpolator</i>, <i>count</i>])\n[<>](https://github.com/vega/vega/blob/master/packages/vega-scale/src/interpolate.js \"Source\")\n\nGiven an *interpolator* function, returns *count* evenly-spaced samples. This method is useful for generating a discrete color scheme from a continuous color interpolator.\n",
    "licenseText": "Copyright (c) 2015-2018, University of Washington Interactive Data Lab\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n  may be used to endorse or promote products derived from this software\n  without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/vega-scale/-/vega-scale-7.0.1.tgz#7ef1d5278bce434675f27c5f2ea663c7c861576a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/vega-scale/-/vega-scale-7.0.1.tgz",
    "hash": "7ef1d5278bce434675f27c5f2ea663c7c861576a",
    "integrity": "sha512-VdDUNZzoMQKnvwntLAcKhdb7KWKB2UjZmRyHyLhH4ORxEK4BjSf7Nzg3GjCudYLtS5MppegZ1USJuIS+LAhZFw==",
    "registry": "npm",
    "packageName": "vega-scale",
    "cacheIntegrity": "sha512-VdDUNZzoMQKnvwntLAcKhdb7KWKB2UjZmRyHyLhH4ORxEK4BjSf7Nzg3GjCudYLtS5MppegZ1USJuIS+LAhZFw== sha1-fvHVJ4vOQ0Z18nxfLqZjx8hhV2o="
  },
  "registry": "npm",
  "hash": "7ef1d5278bce434675f27c5f2ea663c7c861576a"
}