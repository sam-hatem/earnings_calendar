{
  "manifest": {
    "name": "free-style",
    "version": "3.1.0",
    "description": "Make CSS easier and more maintainable by using JavaScript",
    "main": "dist/index.js",
    "typings": "dist/index.d.ts",
    "module": "dist.es2015/index.js",
    "sideEffects": false,
    "jsnext:main": "dist.es2015/index.js",
    "files": [
      "dist/",
      "dist.es2015/",
      "LICENSE"
    ],
    "scripts": {
      "prettier": "prettier --write",
      "lint": "tslint \"src/**/*\" --project tsconfig.json",
      "format": "npm run prettier -- \"*.{json,md,yml}\" \"{src,examples,benchmarks}/**/*.{js,ts}\"",
      "build": "rimraf dist/ dist.es2015/ && tsc && tsc -P tsconfig.es2015.json",
      "bench:hash": "ts-node benchmarks/hash.ts",
      "bench:perf": "ts-node benchmarks/perf.ts",
      "specs": "jest --coverage",
      "test": "npm run build && npm run lint && npm run specs && npm run size",
      "size": "size-limit",
      "prepare": "npm run build"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/blakeembrey/free-style.git"
    },
    "keywords": [
      "inline",
      "css",
      "style",
      "js",
      "hash",
      "server"
    ],
    "author": {
      "name": "Blake Embrey",
      "email": "hello@blakeembrey.com",
      "url": "http://blakeembrey.me"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/blakeembrey/free-style/issues"
    },
    "homepage": "https://github.com/blakeembrey/free-style",
    "size-limit": [
      {
        "path": "dist/index.js",
        "limit": "2.1 kB"
      }
    ],
    "jest": {
      "roots": [
        "<rootDir>/src/"
      ],
      "transform": {
        "\\.tsx?$": "ts-jest"
      },
      "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(tsx?|jsx?)$",
      "moduleFileExtensions": [
        "ts",
        "tsx",
        "js",
        "jsx",
        "json",
        "node"
      ]
    },
    "husky": {
      "hooks": {
        "pre-commit": "lint-staged"
      }
    },
    "lint-staged": {
      "*.{js,json,css,md}": [
        "npm run prettier",
        "git add"
      ]
    },
    "publishConfig": {
      "access": "public"
    },
    "devDependencies": {
      "@size-limit/preset-small-lib": "^4.0.2",
      "@types/jest": "^25.1.3",
      "@types/node": "^13.7.7",
      "husky": "^4.2.3",
      "jest": "^25.1.0",
      "just-css-properties": "^1.0.0",
      "lint-staged": "^10.0.8",
      "prettier": "^1.18.2",
      "rimraf": "^3.0.0",
      "size-limit": "^4.0.2",
      "ts-jest": "^25.2.1",
      "ts-node": "^8.4.1",
      "tslint": "^6.0.0",
      "tslint-config-prettier": "^1.18.0",
      "tslint-config-standard": "^9.0.0",
      "typescript": "^3.6.4"
    },
    "_registry": "npm",
    "_loc": "/home/jovyan/.cache/yarn/v6/npm-free-style-3.1.0-4e2996029534e6b1731611d843437b9e2f473f08-integrity/node_modules/free-style/package.json",
    "readmeFilename": "README.md",
    "readme": "# Free-Style\n\n[![NPM version][npm-image]][npm-url]\n[![NPM downloads][downloads-image]][downloads-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Bundle size][bundlephobia-image]][bundlephobia-url]\n\n> **Free-Style** is designed to make CSS easier and more maintainable by using JavaScript.\n\n## Installation\n\n```\nnpm install free-style --save\n```\n\n## Why?\n\nThere's a [great presentation by Christopher Chedeau](https://speakerdeck.com/vjeux/react-css-in-js) you should check out.\n\n### Solved by using CSS in JS\n\n- No global variables (What and where is `.button`? Why is it conflicting?)\n- Defined dependency systems (CommonJS, Require.js, `<script />`)\n- Dead code elimination automatically removes unused styles\n- Minification through JavaScript tooling\n- Shared constants and reusable styles\n- Every style is isolated, tested and namespaced to the JS component\n- Extensible - everything from [Math](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) to [color manipulation](https://github.com/MoOx/color) already exists!\n\n### Also solved with Free-Style\n\n- Works with third-party DOM components (You can nest regular `.class-name` in your styles)\n- Consistently generates styles and class names, and will automatically merge duplicate styles\n- Develop components alongside the style (No more hunting CSS files for estranged `ul > li > a`)\n- Create universal applications and serve styles for **only** the components rendered (see [React Free-Style](http://github.com/blakeembrey/react-free-style))\n- Use the CSS you already know (`{ '&:hover': { ... } }`)\n- Automatically namespace `@`-rule styles (`{ '@media (min-width: 500px)': { ... } }`)\n- Overload CSS properties using arrays (`{ backgroundColor: ['red', 'linear-gradient(to right, red 0%, blue 100%)'] }`)\n- Small and powerful API that works with any ecosystem (~360 SLOC)\n\n### But How?\n\n**Free-Style** generates a consistent hash from the style, after alphabetical property ordering and formatting, to use as the class name. This allows duplicate styles to automatically be merged on duplicate hashes. Every style is \"registered\" and assigned to a variable, which gets the most out of linters that will warn on unused variables and features like dead code minification. Using \"register\" returns the class name used for the `Style` instance and style instances (returned by `create()`) can be merged together at runtime to output _only_ the styles on page (see [React Free-Style](http://github.com/blakeembrey/react-free-style)). Styles should usually be created outside of the application run loop (e.g. `render()`) so the CSS string and hashes are only generated once.\n\n### Ways to Use\n\n- [`react-free-style`](https://github.com/blakeembrey/react-free-style) - React implementation that renders styles on the current page (for universal apps)\n- [`typestyle`](https://github.com/typestyle/typestyle) - Popular type-safe interface for working with CSS\n- [`stylin`](https://github.com/ajoslin/stylin) - Simplest abstraction for creating styles, rules, and keyframes, and keeps `<style />` in sync\n- [`i-css`](https://github.com/irom-io/i-css) - Library for writing CSS with literal objects\n- **This module!** - Manually create, compose and manipulate style instances\n\n## Usage\n\n```js\nvar FreeStyle = require(\"free-style\");\n\n// Create a stylesheet instance.\nvar Style = FreeStyle.create();\n\n// Register a new style, returning a class name to use.\nvar backgroundStyle = Style.registerStyle({\n  backgroundColor: \"red\"\n}); //=> \"f14svl5e\"\n\n// Inject `<style>` into the `<head>`.\nvar styleElement = document.createElement(\"style\");\nstyleElement.textContent = Style.getStyles();\ndocument.head.appendChild(styleElement);\n\n// Render the style by using the class name.\nReact.render(\n  <div className={backgroundStyle}>Hello world!</div>,\n  document.body\n);\n```\n\n### Style\n\n```js\nvar buttonStyle = Style.registerStyle({\n  $displayName: \"button\",\n  backgroundColor: \"red\",\n  padding: 10\n});\n\nconsole.log(buttonStyle); //=> \"button_f65pi0b\"\n```\n\n**Tip:** The string returned by `registerStyle` is a unique hash of the content and used as the HTML class name. The `$displayName` is only used during development, and stripped in production (`process.env.NODE_ENV === 'production'`).\n\n#### Overload CSS Properties\n\n```js\nStyle.registerStyle({\n  background: [\n    \"red\",\n    \"-moz-linear-gradient(left, red 0%, blue 100%)\",\n    \"-webkit-linear-gradient(left, red 0%, blue 100%)\",\n    \"-o-linear-gradient(left, red 0%, blue 100%)\",\n    \"-ms-linear-gradient(left, red 0%, blue 100%)\",\n    \"linear-gradient(to right, red 0%, blue 100%)\"\n  ]\n}); //=> \"f1n85iiq\"\n```\n\n#### Nest Rules\n\n```js\nStyle.registerStyle({\n  color: \"red\",\n  \"@media (min-width: 500px)\": {\n    color: \"blue\"\n  }\n}); //=> \"fk9tfor\"\n```\n\n#### Nest Selectors\n\n```js\nStyle.registerStyle({\n  color: \"red\",\n  \".classname\": {\n    color: \"blue\"\n  }\n}); //=> \"fc1zv17\"\n```\n\n#### Parent Selector Reference\n\n```js\nStyle.registerStyle({\n  color: \"red\",\n  \"&:hover\": {\n    color: \"blue\"\n  }\n}); //=> \"f1h42yg6\"\n```\n\n**Tip:** The ampersand (`&`) will be replaced by the parent selector at runtime. In this example, the result is `.f1h42yg6:hover`.\n\n#### Use JavaScript\n\n```js\nvar extend = require(\"xtend\");\n\nvar ellipsisStyle = {\n  whiteSpace: \"nowrap\",\n  overflow: \"hidden\",\n  textOverflow: \"ellipsis\"\n};\n\nvar redEllipsisStyle = Style.registerStyle(\n  extend(\n    {\n      color: \"red\"\n    },\n    ellipsisStyle\n  )\n); //=> \"fvxl8qs\"\n```\n\n**Tip:** This is a shallow extend example. There are modules on NPM for deep extending objects. You can also take advantage of new JavaScript features, such as `const` and computed properties:\n\n```js\nconst mediaQuery = \"@media (min-width: 400px)\";\n\nconst style = Style.registerStyle({\n  backgroundColor: \"red\",\n  [mediaQuery]: {\n    backgroundColor: \"pink\"\n  }\n});\n```\n\n#### Unique Style Output\n\nSometimes you need to skip the de-duping behavior of `free-style`. Use `$unique` to force separate styles:\n\n```js\nStyle.registerStyle({\n  color: \"blue\",\n  \"&::-webkit-input-placeholder\": {\n    color: `rgba(0, 0, 0, 0)`,\n    $unique: true\n  },\n  \"&::-moz-placeholder\": {\n    color: `rgba(0, 0, 0, 0)`,\n    $unique: true\n  },\n  \"&::-ms-input-placeholder\": {\n    color: `rgba(0, 0, 0, 0)`,\n    $unique: true\n  }\n}); //=> \"f13byakl\"\n\nStyle.getStyles(); //=> \".f13byakl{color:blue}.f13byakl::-webkit-input-placeholder{color:rgba(0, 0, 0, 0)}.f13byakl::-moz-placeholder{color:rgba(0, 0, 0, 0)}.f13byakl::-ms-input-placeholder{color:rgba(0, 0, 0, 0)}\"\n```\n\n### Keyframes\n\n```js\nvar colorAnimation = Style.registerKeyframes({\n  from: { color: \"red\" },\n  to: { color: \"blue\" }\n}); //=> \"h1j3ughx\"\n\nvar style = Style.registerStyle({\n  animationName: colorAnimation,\n  animationDuration: \"1s\"\n}); //=> \"fibanyf\"\n```\n\n**Tip:** The string returned by `registerKeyframes` the name of the animation, which is a hash of the rule.\n\n### Hash Rule\n\nHashed rules are what `registerKeyframes` uses internally. It accepts a prefix and the styles object, which will create a rule using `prefix + hash`. Conveniently, the same contents will generate the same hash so you can register vendor-specific rules using the same hash.\n\n```js\nvar keyframes = {\n  from: {\n    color: \"blue\"\n  },\n  to: {\n    color: \"red\"\n  }\n};\n\nvar animation1 = Style.registerHashRule(\"@keyframes\", keyframes); //=> \"f1dz2mpx\"\nvar animation2 = Style.registerHashRule(\"@-webkit-keyframes\", keyframes); //=> \"f1dz2mpx\"\n```\n\n### Rules\n\n```js\nStyle.registerRule(\"@font-face\", {\n  fontFamily: '\"Bitstream Vera Serif Bold\"',\n  src: 'url(\"https://mdn.mozillademos.org/files/2468/VeraSeBd.ttf\")'\n});\n\nStyle.registerRule(\"@media print\", {\n  body: {\n    color: \"red\"\n  }\n});\n\nStyle.registerRule(\"body\", {\n  margin: 0,\n  padding: 0\n});\n```\n\n### CSS Object\n\n```js\nStyle.registerCss({\n  body: {\n    margin: 0,\n    padding: 0,\n    \"@print\": {\n      color: \"#000\"\n    }\n  },\n  h1: {\n    fontSize: \"2em\"\n  }\n});\n```\n\n### CSS String\n\n```js\nStyle.getStyles(); //=> \".f65pi0b{background-color:red;padding:10px}\"\n```\n\n### Useful Libraries\n\n- [`polished`](https://polished.js.org)\n- [`classnames`](https://github.com/JedWatson/classnames)\n- [`color`](https://github.com/MoOx/color)\n- [`style-helper`](https://github.com/blakeembrey/style-helper)\n- [`postcss-js`](https://github.com/postcss/postcss-js)\n- [`inline-style-prefixer`](https://github.com/rofrischmann/inline-style-prefixer)\n- [`insert-css`](https://github.com/substack/insert-css)\n- [`image-url`](https://github.com/ajoslin/image-url)\n- [**Add yours!**](https://github.com/blakeembrey/free-style/issues/new)\n\n### Implementor Details\n\n#### Debug\n\nDisplay names will automatically be removed when `process.env.NODE_ENV === \"production\"`.\n\n#### Changes\n\n**Free-Style** provides two methods for detecting style changes. First is a `changeId` property, incremented every time a change occurs.\n\n```js\nconst Style = create();\nconst prevChangeId = Style.changeId;\n\nStyle.registerStyle({ color: \"red\" });\n\nif (Style.changeId !== prevChangeId) {\n}\n```\n\nThe only argument to `create()` is a map of change function handlers. All functions are required:\n\n- `add (style: Container<any>, index: number): void`\n- `change (style: Container<any>, oldIndex: number, newIndex: number): void`\n- `remove (style: Container<any>, index: number): void`\n\nAll classes implement `Container`, so you can `getStyles()`, `getIdentifier()` or use `id`.\n\n#### Classes\n\n```js\nFreeStyle.FreeStyle; // Similar to writing a CSS file, holds styles and rules - returned from `create()`.\nFreeStyle.Style; // Styles hold the CSS string and a generate a consistent hash of their contents.\nFreeStyle.Rule; // Rules are lighter-weight containers that can be nested inside `FreeStyle` instances.\nFreeStyle.Selector; // Selectors hold the CSS selector and can be nested inside `Style` instances.\nFreeStyle.Cache; // `FreeStyle`, `Style` and `Rule` all extend the cache which maintains reference counts.\n```\n\n#### Other Properties and Methods\n\n```js\nvar ChildStyle = Style.create();\n\nStyle.merge(ChildStyle); // Merge the child styles into the current instance.\nStyle.unmerge(ChildStyle); // Unmerge the child styles from the current instance.\n```\n\n## Legacy Browsers\n\nTo support legacy browsers (<= IE8) you'll need to [polyfill](https://github.com/es-shims/es5-shim) some ES5 features, such as `Object.keys`, `Object.create(null)` and `Array.isArray`.\n\n## License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/free-style.svg?style=flat\n[npm-url]: https://npmjs.org/package/free-style\n[downloads-image]: https://img.shields.io/npm/dm/free-style.svg?style=flat\n[downloads-url]: https://npmjs.org/package/free-style\n[travis-image]: https://img.shields.io/travis/blakeembrey/free-style.svg?style=flat\n[travis-url]: https://travis-ci.org/blakeembrey/free-style\n[coveralls-image]: https://img.shields.io/coveralls/blakeembrey/free-style.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/blakeembrey/free-style?branch=master\n[bundlephobia-image]: https://img.shields.io/bundlephobia/minzip/free-style.svg\n[bundlephobia-url]: https://bundlephobia.com/result?p=free-style\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Blake Embrey (hello@blakeembrey.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/free-style/-/free-style-3.1.0.tgz#4e2996029534e6b1731611d843437b9e2f473f08",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/free-style/-/free-style-3.1.0.tgz",
    "hash": "4e2996029534e6b1731611d843437b9e2f473f08",
    "integrity": "sha512-vJujYSIyT30iDoaoeigNAxX4yB1RUrh+N2ZMhIElMr3BvCuGXOw7XNJMEEJkDUeamK2Rnb/IKFGKRKlTWIGRWA==",
    "registry": "npm",
    "packageName": "free-style",
    "cacheIntegrity": "sha512-vJujYSIyT30iDoaoeigNAxX4yB1RUrh+N2ZMhIElMr3BvCuGXOw7XNJMEEJkDUeamK2Rnb/IKFGKRKlTWIGRWA== sha1-TimWApU05rFzFhHYQ0N7ni9HPwg="
  },
  "registry": "npm",
  "hash": "4e2996029534e6b1731611d843437b9e2f473f08"
}