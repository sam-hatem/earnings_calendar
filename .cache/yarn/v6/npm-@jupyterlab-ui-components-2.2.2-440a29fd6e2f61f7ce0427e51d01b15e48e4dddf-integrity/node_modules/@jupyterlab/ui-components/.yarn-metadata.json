{
  "manifest": {
    "name": "@jupyterlab/ui-components",
    "version": "2.2.2",
    "description": "JupyterLab - UI components written in React",
    "homepage": "https://github.com/jupyterlab/jupyterlab",
    "bugs": {
      "url": "https://github.com/jupyterlab/jupyterlab/issues"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/jupyterlab/jupyterlab.git"
    },
    "license": "BSD-3-Clause",
    "author": {
      "name": "Project Jupyter"
    },
    "files": [
      "lib/**/*.{d.ts,eot,gif,html,jpg,js,js.map,json,png,svg,woff2,ttf}",
      "style/**/*.{css,eot,gif,html,jpg,json,png,svg,woff2,ttf}"
    ],
    "sideEffects": [
      "style/**/*"
    ],
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "style": "style/index.css",
    "scripts": {
      "build": "tsc -b",
      "build:storybook": "build-storybook -c .storybook",
      "build:test": "tsc --build tsconfig.test.json",
      "clean": "rimraf lib && rimraf tsconfig.tsbuildinfo",
      "cleansvg": "svgo --config svgo.yaml",
      "docs": "typedoc src",
      "docs:init": "bash docs/build.sh",
      "prepublishOnly": "npm run build",
      "storybook": "start-storybook -p 9001 -c .storybook",
      "test": "jest",
      "test:cov": "jest --collect-coverage",
      "test:debug": "node --inspect-brk node_modules/.bin/jest --runInBand",
      "test:debug:watch": "node --inspect-brk node_modules/.bin/jest --runInBand --watch",
      "watch": "tsc -b --watch"
    },
    "dependencies": {
      "@blueprintjs/core": "^3.22.2",
      "@blueprintjs/select": "^3.11.2",
      "@jupyterlab/coreutils": "^4.2.3",
      "@lumino/coreutils": "^1.4.2",
      "@lumino/signaling": "^1.3.5",
      "@lumino/virtualdom": "^1.6.1",
      "@lumino/widgets": "^1.11.1",
      "react": "~16.9.0",
      "react-dom": "~16.9.0",
      "typestyle": "^2.0.4"
    },
    "devDependencies": {
      "@babel/core": "^7.5.0",
      "@babel/preset-env": "^7.7.6",
      "@jupyterlab/testutils": "^2.2.4",
      "@storybook/addon-actions": "^5.2.5",
      "@storybook/react": "^5.2.5",
      "@types/jest": "^24.0.23",
      "@types/react": "~16.9.16",
      "@types/webpack-env": "^1.14.1",
      "awesome-typescript-loader": "^5.2.1",
      "babel-loader": "^8.0.6",
      "jest": "^25.2.3",
      "react-docgen-typescript-loader": "^3.3.0",
      "rimraf": "~3.0.0",
      "svgo": "^1.3.2",
      "ts-jest": "^25.2.1",
      "typedoc": "^0.15.4",
      "typescript": "~3.7.3"
    },
    "peerDependencies": {
      "react": "~16.9.0"
    },
    "publishConfig": {
      "access": "public"
    },
    "jupyterlab": {
      "extraStyles": {
        "blueprintjs": [
          "icons/lib/css/blueprint-icons.css",
          "core/lib/css/blueprint.css"
        ]
      }
    },
    "gitHead": "12ecbc269493ae4d061e7eca7683d0a908818280",
    "_registry": "npm",
    "_loc": "/home/jovyan/.cache/yarn/v6/npm-@jupyterlab-ui-components-2.2.2-440a29fd6e2f61f7ce0427e51d01b15e48e4dddf-integrity/node_modules/@jupyterlab/ui-components/package.json",
    "readmeFilename": "README.md",
    "readme": "<!--\nTHIS FILE IS AUTOGENERATED, DO NOT EDIT\n\nInstead, make changes to docs sources in `packages/ui-components/docs`,\nthen run \"jlpm docs:init\" to refresh the built docs\n-->\n\n# @jupyterlab/ui-components\n\nThe\n[@jupyterlab/ui-components](https://jupyterlab.github.io/jupyterlab/modules/_ui_components_src_index_.html)\npackage provides UI elements that are widely used in JupyterLab core,\nand that can be reused in your own extensions.\n\nFor example, all of the icons in JupyterLab core can be reused via\n`LabIcon`. You can also use `LabIcon` to create your own custom icons\nthat will be able to automatically change color to match the current\nJupyterLab theme.\n\n# `LabIcon` - set up and render icons\n\n`LabIcon` is the icon class used by JupyterLab, and is part of the new\nicon system introduced in JupyterLab v2.0.\n\n## How JupyterLab handles icons\n\nThe @jupyterlab/ui-components package provides icons to the rest of\nJupyterLab, in the form of a set of `LabIcon` instances (currently about\n80). All of the icons in the core JupyterLab packages are rendered using\none of these `LabIcon` instances.\n\n## Using the icons in your own code\n\nYou can use any of JupyterLab icons in your own code via an `import`\nstatement. For example, to use `jupyterIcon` you would first do:\n\n```typescript\nimport { jupyterIcon } from '@jupyterlab/ui-components';\n```\n\n## How to render an icon into a DOM node\n\nIcons can be added as children to any `div` or `span` nodes using the\n`icon.element(...)` method (where `icon` is any instance of `LabIcon`).\nFor example, to render the Jupyter icon you could do:\n\n```typescript\njupyterIcon.element({\n  container: elem,\n  height: '16px',\n  width: '16px',\n  marginLeft: '2px'\n});\n```\n\nwhere `elem` is any `HTMLElement` with a `div` or `span` tag. As shown\nin the above example, the icon can be styled by passing CSS parameters\ninto `.element(...)`. Any valid CSS parameter can be used (one catch:\nsnake case params do have to be converted to camel case: instead of\n`foo-bar: '8px'`, you’d need to use `fooBar: '8px'`.\n\n## How to render an icon as a React component\n\nIcons can also be rendered using React. The `icon.react` parameter holds\na standard React component that will display the icon on render. Like\nany React component, `icon.react` can be used in various ways.\n\nFor example, here is how you would add the Jupyter icon to the render\ntree of another React component:\n\n```jsx\npublic render() {\n  return (\n    <div className=\"outer\">\n      <div className=\"inner\">\n        <jupyterIcon.react tag=\"span\" right=\"7px\" top=\"5px\" />\n        \"and here's a text node\"\n      </div>\n    </div>\n  );\n}\n```\n\nAlternatively, you can just render the icon directly into any existing\nDOM node `elem` by using the `ReactDOM` module:\n\n```typescript\nReactDOM.render(jupyterIcon.react, elem);\n```\n\nIf do you use `ReactDOM` to render, and if the `elem` node is ever\nremoved from the DOM, you’ll first need to clean it up:\n\n```typescript\nReactDOM.unmountComponentAtNode(elem);\n```\n\nThis cleanup step is not a special property of `LabIcon`, but is instead\nneeded for any React component that is rendered directly at the top\nlevel by `ReactDOM`: failure to call `unmountComponentAtNode` can result\nin a [memory leak](https://stackoverflow.com/a/48198011/425458).\n\n## How to create your own custom `LabIcon`\n\nYou can create your own custom icon by constructing a new instance of\n`LabIcon`:\n\n```typescript\nexport const fooIcon = new LabIcon({\n  name: 'barpkg:foo',\n  svgstr: '<svg>...</svg>'\n});\n```\n\nwhere `name` should be of the form “your-pkg:icon-name”, and `svgstr` is\nthe raw contents of your icon’s svg file.\n\n## How to create a new `LabIcon` from an external svg file\n\nAlthough you can copy-and-paste an svg directly into the `LabIcon`\nconstructor, the best practice is to keep the svg for each of your icons\nin its own separate svg file. You will need to have an `svg.d.ts` file\nat the root of your project’s `src` directory:\n\n```typescript\n// svg.d.ts\n\ndeclare module '*.svg' {\n  const value: string;\n  export default value;\n}\n```\n\nYou can then `import` the contents of an svg file:\n\n```typescript\nimport fooSvgstr from 'path-to-your/foo.svg';\n\nexport const fooIcon = new LabIcon({\n  name: 'barpkg:foo',\n  svgstr: fooSvgstr\n});\n```\n\n## Sync icon color to JupyterLab theme\n\n<em>Example svgs with class annotation can be found in <a href=\"https://github.com/jupyterlab/jupyterlab/tree/f0153e0258b32674c9aec106383ddf7b618cebab/packages/ui-components/style/icons\">ui-components/style/icons</a></em>\n\nYou can ensure that the colors of your custom `LabIcon` sync up to the\ncolors of the current JuptyerLab theme by adding appropriate `class`\nannotations to each colored element of your icon's svg.\n\nIn other words, each element of your svg that a `fill=\"...\"` or a\n`stroke=\"...\"` property should also have a `class=\"jp-icon<whatever>\"`\nproperty.\n\n### Available icon classes\n\n<em>Icon-related CSS classes are defined in <a href=\"https://github.com/jupyterlab/jupyterlab/blob/f0153e0258b32674c9aec106383ddf7b618cebab/packages/ui-components/style/icons.css\">ui-components/style/icons.css</a></em>\n\nAll colors shown are for the standard light/dark theme, mouse over for\nhex values.\n\n#### `jp-iconX`: contrast to theme background\n\n<ul>\n<li>jp-icon0: <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#111\"/><title>#111</title></svg> / <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#fff\"/><title>#fff</title></svg></li>\n<li>jp-icon1: <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#212121\"/><title>#212121</title></svg> / <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#fff\"/><title>#fff</title></svg></li>\n<li>jp-icon2: <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#424242\"/><title>#424242</title></svg> / <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#eee\"/><title>#eee</title></svg></li>\n<li>jp-icon3: <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#616161\"/><title>#616161</title></svg> / <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#bdbdbd\"/><title>#bdbdbd</title></svg></li>\n<li>jp-icon4: <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#757575\"/><title>#757575</title></svg> / <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#757575\"/><title>#757575</title></svg></li>\n</ul>\n\nMost one-color icons in JupyterLab (including the sidebar and toolbar\nicons) are colored using the `jp-icon3` class.\n\nFor light/dark themes, `jp-icon0` corresponds to the darkest/lighest\nbackground color, while `jp-icon1` is somewhat lighter/darker, and so\nforth.\n\n#### `jp-icon-accentX`: match to theme background\n\n<ul>\n<li>jp-icon-accent0: <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#fff\"/><title>#fff</title></svg> / <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#111\"/><title>#111</title></svg></li>\n<li>jp-icon-accent1: <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#fff\"/><title>#fff</title></svg> / <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#212121\"/><title>#212121</title></svg></li>\n<li>jp-icon-accent2: <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#eee\"/><title>#eee</title></svg> / <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#424242\"/><title>#424242</title></svg></li>\n<li>jp-icon-accent3: <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#bdbdbd\"/><title>#bdbdbd</title></svg> / <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#616161\"/><title>#616161</title></svg></li>\n<li>jp-icon-accent4: <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#757575\"/><title>#757575</title></svg> / <svg width=\"16\" viewBox=\"0 0 1 1\"><rect width=\"1\" height=\"1\" fill=\"#757575\"/><title>#757575</title></svg></li>\n</ul>\n\nFor light/dark themes, `jp-icon-accent0` corresponds to the\nlighest/darkest background color, while `jp-icon-accent1` is somewhat\ndarker/lighter, and so forth.\n\n### Adding classes to a one-color icon\n\nFor most simple, one-color icons, it is desirable for the icon's color\nto strongly constrast with that of the application's background. You can\nacheive this using one of the `jp-iconX` classes.\n\n**Example: check icon**\n\n_svg source:_\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" viewBox=\"0 0 24 24\">\n  <path\n    class=\"jp-icon3\"\n    fill=\"#616161\"\n    d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"\n  />\n</svg>\n```\n\n_rendered icon:_\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" viewBox=\"0 0 24 24\">\n  <path class=\"jp-icon3\" fill=\"#616161\" d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\n</svg>\n\n### Adding classes to a multi-colored icon\n\nFor more complex icons, each element that needs to match the background\nshould be annotated with a `jp-icon-accentX` class, while each element\nthat needs to contrast with the background should be annotated with a\n`jp-iconX` class.\n\n**Example: close-circle icon**\n\n_svg source:_\n\n```html\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" viewBox=\"0 0 24 24\">\n  <circle class=\"jp-icon3\" fill=\"#616161\" cx=\"12\" cy=\"12\" r=\"11\" />\n  <rect\n    class=\"jp-icon-accent0\"\n    fill=\"#fff\"\n    height=\"18\"\n    width=\"2\"\n    x=\"11\"\n    y=\"3\"\n    transform=\"rotate(315, 12, 12)\"\n  />\n  <rect\n    class=\"jp-icon-accent0\"\n    fill=\"#fff\"\n    height=\"18\"\n    width=\"2\"\n    x=\"11\"\n    y=\"3\"\n    transform=\"rotate(45, 12, 12)\"\n  />\n</svg>\n```\n\n_rendered icon:_\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" viewBox=\"0 0 24 24\">\n  <circle class=\"jp-icon3\" fill=\"#616161\" cx=\"12\" cy=\"12\" r=\"11\"/>\n  <rect class=\"jp-icon-accent0\" fill=\"#fff\" height=\"18\" width=\"2\" x=\"11\" y=\"3\" transform=\"rotate(315, 12, 12)\"/>\n  <rect class=\"jp-icon-accent0\" fill=\"#fff\" height=\"18\" width=\"2\" x=\"11\" y=\"3\" transform=\"rotate(45, 12, 12)\"/>\n</svg>\n\n## Background\n\n### Icon handling in Jupyterlab\n\nPre JupyterLab 2.0, most icons were created using the\nicons-as-css-background pattern:\n\n- Set up the icon’s svg as a `background-image` in CSS:\n\n  ```css\n  /* CSS */\n\n  .jp-FooIcon {\n    background-image: url('path-to-your/foo.svg');\n  }\n  ```\n\n- Add the icon to the DOM by constructing an otherwise empty DOM node\n  with the appropriate class:\n\n  ```typescript\n  // typescript\n\n  const e = document.createElement('div');\n  e.className = 'jp-FooIcon';\n  document.body.append(e);\n  ```\n\nWhat you end up with is a single DOM node that has the “foo” icon as a\nbackground image.\n\nPost JupyterLab 2.0, nearly all icons in core are now created using\n[LabIcon](https://github.com/jupyterlab/jupyterlab/blob/f0153e0258b32674c9aec106383ddf7b618cebab/packages/ui-components/src/icon/labicon.tsx)\nand the icons-as-inline-svg pattern:\n\n- Construct a new instance of LabIcon from the icon’s name and svg:\n\n  ```typescript\n  // typescript\n\n  // svgstr is the raw contents of an icon's svg file\n  export const fooIcon = new LabIcon({\n    name: 'barpkg:foo',\n    svgstr: '<svg>...</svg>'\n  });\n  ```\n\n- Add the icon to the DOM using the appropriate property of your\n  LabIcon instance (either LabIcon.element() to directly create a DOM\n  node, or LabIcon.react to get the icon as a react component):\n\n  ```typescript\n  // typescript\n\n  const e = fooIcon.element();\n  document.body.append(e);\n  ```\n\nWhat you end up with is a DOM node (by default a ‘div’) that has an\ninline svg node as a child.\n\n### `background-image` vs inline svg\n\nThe big limitation of the old icon-as-css-background pattern is that svg\nimages rendered as `background-image` are invisible to CSS. On the other\nhand, an icon rendered as an inline svg node is fully exposed to the\nCSS. This allows us to dynamicly change icon styling as needed simply by\nmodifying our CSS. Most importantly, this allows us to recolor icons\naccording to Jupyterlab’s current theme.\n",
    "licenseText": "Copyright (c) 2015 Project Jupyter Contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nSemver File License\n===================\n\nThe semver.py file is from https://github.com/podhmo/python-semver\nwhich is licensed under the \"MIT\" license.  See the semver.py file for details.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@jupyterlab/ui-components/-/ui-components-2.2.2.tgz#440a29fd6e2f61f7ce0427e51d01b15e48e4dddf",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@jupyterlab/ui-components/-/ui-components-2.2.2.tgz",
    "hash": "440a29fd6e2f61f7ce0427e51d01b15e48e4dddf",
    "integrity": "sha512-4mNlsM/ueUahkqdY4l6f3KdkwGbxZP8BQJfQwVobuCpWYduOQQvDWB/a0kr4p1CVnOTK3rvl4cICRs467pwzRg==",
    "registry": "npm",
    "packageName": "@jupyterlab/ui-components",
    "cacheIntegrity": "sha512-4mNlsM/ueUahkqdY4l6f3KdkwGbxZP8BQJfQwVobuCpWYduOQQvDWB/a0kr4p1CVnOTK3rvl4cICRs467pwzRg== sha1-RAop/W4vYffOBCflHQGxXkjk3d8="
  },
  "registry": "npm",
  "hash": "440a29fd6e2f61f7ce0427e51d01b15e48e4dddf"
}