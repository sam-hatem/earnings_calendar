{
  "manifest": {
    "name": "worker-loader",
    "version": "2.0.0",
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "description": "worker loader module for webpack",
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/worker-loader.git"
    },
    "bugs": {
      "url": "https://github.com/webpack-contrib/worker-loader/issues"
    },
    "homepage": "https://github.com/webpack-contrib/worker-loader",
    "license": "MIT",
    "main": "dist/cjs.js",
    "files": [
      "dist"
    ],
    "scripts": {
      "start": "npm run build -- -w",
      "build": "cross-env NODE_ENV=production babel src -d dist --ignore 'src/**/*.test.js' --copy-files",
      "clean": "del-cli dist",
      "lint": "eslint --cache src test",
      "lint-staged": "lint-staged",
      "prebuild": "npm run clean",
      "prepare": "npm run build",
      "release": "standard-version",
      "security": "nsp check",
      "test": "jest",
      "test:watch": "jest --watch",
      "test:coverage": "jest --collectCoverageFrom='src/**/*.js' --coverage",
      "ci:lint": "npm run lint && npm run security",
      "ci:test": "npm run test -- --runInBand",
      "ci:coverage": "npm run test:coverage -- --runInBand",
      "defaults": "webpack-defaults"
    },
    "dependencies": {
      "loader-utils": "^1.0.0",
      "schema-utils": "^0.4.0"
    },
    "devDependencies": {
      "babel-cli": "^6.0.0",
      "babel-jest": "^21.0.0",
      "babel-plugin-transform-object-rest-spread": "^6.0.0",
      "babel-polyfill": "^6.0.0",
      "babel-preset-env": "^1.0.0",
      "cross-env": "^5.0.0",
      "del": "^3.0.0",
      "del-cli": "^1.0.0",
      "eslint": "^4.0.0",
      "eslint-config-webpack": "^1.0.0",
      "eslint-plugin-import": "^2.2.0",
      "jest": "^21.0.0",
      "lint-staged": "^4.0.0",
      "nsp": "^2.6.0",
      "pre-commit": "^1.0.0",
      "standard-version": "^4.0.0",
      "webpack": "^3.0.0",
      "webpack-defaults": "^1.6.0"
    },
    "peerDependencies": {
      "webpack": "^3.0.0 || ^4.0.0-alpha.0 || ^4.0.0"
    },
    "engines": {
      "node": ">= 6.9.0 || >= 8.9.0"
    },
    "pre-commit": "lint-staged",
    "lint-staged": {
      "*.js": [
        "eslint --fix",
        "git add"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/jovyan/.cache/yarn/v6/npm-worker-loader-2.0.0-45fda3ef76aca815771a89107399ee4119b430ac-integrity/node_modules/worker-loader/package.json",
    "readmeFilename": "README.md",
    "readme": "[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![test][test]][test-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n\n<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" src=\"https://cdn.rawgit.com/webpack/media/e7485eb2/logo/icon.svg\">\n  </a>\n  <h1>Worker Loader</h1>\n  <p>This loader registers the script as <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\">Web Worker</a><p>\n</div>\n\n\n<h2 align=\"center\">Install</h2>\n\n```bash\nnpm i -D worker-loader\n```\n\n<h2 align=\"center\"><a href=\"https://webpack.js.org/concepts/loaders\">Usage</a></h2>\n\n### `Inlined`\n\n**App.js**\n```js\nimport Worker from 'worker-loader!./Worker.js';\n```\n\n### `Config`\n\n**webpack.config.js**\n```js\n{\n  module: {\n    rules: [\n      {\n        test: /\\.worker\\.js$/,\n        use: { loader: 'worker-loader' }\n      }\n    ]\n  }\n}\n```\n\n**App.js**\n```js\nimport Worker from './file.worker.js';\n\nconst worker = new Worker();\n\nworker.postMessage({ a: 1 });\nworker.onmessage = function (event) {};\n\nworker.addEventListener(\"message\", function (event) {});\n```\n\n<h2 align=\"center\">Options</h2>\n\n|Name|Type|Default|Description|\n|:--:|:--:|:-----:|:----------|\n|[**`name`**](#name)|`{String}`|`[hash].worker.js`|Set a custom name for the output script| \n|[**`inline`**](#inline)|`{Boolean}`|`false`|Inline the worker as a BLOB|\n|[**`fallback`**](#fallback)|`{Boolean}`|`false`|Require a fallback for non-worker supporting environments|\n|[**`publicPath`**](#publicPath)|`{String}`|`null`|Override the path from which worker scripts are downloaded|\n\n### `name`\n\nTo set a custom name for the output script, use the `name` parameter. The name may contain the string `[hash]`, which will be replaced with a content dependent hash for caching purposes. When using `name` alone `[hash]` is omitted.\n\n*webpack.config.js**\n```js\n{\n  loader: 'worker-loader',\n  options: { name: 'WorkerName.[hash].js' }\n}\n```\n\n### `inline`\n\nYou can also inline the worker as a BLOB with the `inline` parameter\n\n**webpack.config.js**\n```js\n{\n  loader: 'worker-loader',\n  options: { inline: true }\n}\n```\n\n> ℹ️  Inline mode will also create chunks for browsers without support for inline workers, to disable this behavior just set `fallback` parameter as `false`\n\n**webpack.config.js**\n```js\n{\n  loader: 'worker-loader'\n  options: { inline: true, fallback: false }\n}\n```\n\n### `fallback`\n\nRequire a fallback for non-worker supporting environments\n\n**webpack.config.js**\n```js\n{\n  loader: 'worker-loader'\n  options: { fallback: false }\n}\n```\n\n### `publicPath`\n\nOverrides the path from which worker scripts are downloaded. If not specified, the same public path used for other\nwebpack assets is used\n\n**webpack.config.js**\n```js\n{\n  loader: 'worker-loader'\n  options: { publicPath: '/scripts/workers/' }\n}\n```\n\n<h2 align=\"center\">Examples</h2>\n\nThe worker file can import dependencies just like any other file\n\n**Worker.js**\n```js\nconst _ = require('lodash')\n\nconst obj = { foo: 'foo' }\n\n_.has(obj, 'foo')\n\n// Post data to parent thread\nself.postMessage({ foo: 'foo' })\n\n// Respond to message from parent thread\nself.addEventListener('message', (event) => console.log(event))  \n```\n\n### `Integrating with ES2015 Modules`\n\n> ℹ️  You can even use ES2015 Modules if you have the [`babel-loader`](https://github.com/babel/babel-loader) configured.\n\n**Worker.js**\n```js\nimport _ from 'lodash'\n\nconst obj = { foo: 'foo' }\n\n_.has(obj, 'foo')\n\n// Post data to parent thread\nself.postMessage({ foo: 'foo' })\n\n// Respond to message from parent thread\nself.addEventListener('message', (event) => console.log(event))\n```\n\n### `Integrating with TypeScript`\n\nTo integrate with TypeScript, you will need to define a custom module for the exports of your worker\n\n**typings/custom.d.ts**\n```typescript\ndeclare module \"worker-loader!*\" {\n  class WebpackWorker extends Worker {\n    constructor();\n  }\n\n  export default WebpackWorker;\n}\n```\n\n**Worker.ts**\n```typescript\nconst ctx: Worker = self as any;\n\n// Post data to parent thread\nctx.postMessage({ foo: \"foo\" });\n\n// Respond to message from parent thread\nctx.addEventListener(\"message\", (event) => console.log(event));\n```\n\n**App.ts**\n```typescript\nimport Worker from \"worker-loader!./Worker\";\n\nconst worker = new Worker();\n\nworker.postMessage({ a: 1 });\nworker.onmessage = (event) => {};\n\nworker.addEventListener(\"message\", (event) => {});\n```\n\n### `Cross-Origin Policy`\n\n[`WebWorkers`](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) are restricted by a [same-origin policy](https://en.wikipedia.org/wiki/Same-origin_policy), so if your `webpack` assets are not being served from the same origin as your application, their download may be blocked by your browser. This scenario can commonly occur if you are hosting your assets under a CDN domain. Even downloads from the `webpack-dev-server` could be blocked. There are two workarounds\n\nFirstly, you can inline the worker as a blob instead of downloading it as an external script via the [`inline`](#inline) parameter\n\n**App.js**\n```js\nimport Worker from './file.worker.js';\n```\n\n**webpack.config.js**\n```js\n{\n  loader: 'worker-loader'\n  options: { inline: true }\n}\n```\n\nSecondly, you may override the base download URL for your worker script via the [`publicPath`](#publicpath) option\n\n**App.js**\n```js\n// This will cause the worker to be downloaded from `/workers/file.worker.js`\nimport Worker from './file.worker.js';\n```\n\n**webpack.config.js**\n```js\n{\n  loader: 'worker-loader'\n  options: { publicPath: '/workers/' }\n}\n```\n\n<h2 align=\"center\">Maintainers</h2>\n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\">\n        <a href=\"https://github.com/TrySound\">\n          <img width=\"150\" height=\"150\" src=\"https://avatars3.githubusercontent.com/u/5635476?v=3&s=150\">\n        </a>\n        <br />\n        <a href=\"https://github.com/TrySound\">Bogdan Chadkin</a>\n      </td>\n      <td align=\"center\">\n        <a href=\"https://github.com/bebraw\">\n          <img width=\"150\" height=\"150\" src=\"https://github.com/bebraw.png?v=3&s=150\">\n          </br>\n          Juho Vepsäläinen\n        </a>\n      </td>\n      <td align=\"center\">\n        <a href=\"https://github.com/d3viant0ne\">\n          <img width=\"150\" height=\"150\" src=\"https://github.com/d3viant0ne.png?v=3&s=150\">\n          </br>\n          Joshua Wiens\n        </a>\n      </td>\n      <td align=\"center\">\n        <a href=\"https://github.com/michael-ciniawsky\">\n          <img width=\"150\" height=\"150\" src=\"https://github.com/michael-ciniawsky.png?v=3&s=150\">\n          </br>\n          Michael Ciniawsky\n        </a>\n      </td>\n      <td align=\"center\">\n        <a href=\"https://github.com/evilebottnawi\">\n          <img width=\"150\" height=\"150\" src=\"https://github.com/evilebottnawi.png?v=3&s=150\">\n          </br>\n          Alexander Krasnoyarov\n        </a>\n      </td>\n    </tr>\n  <tbody>\n</table>\n\n\n[npm]: https://img.shields.io/npm/v/worker-loader.svg\n[npm-url]: https://npmjs.com/package/worker-loader\n\n[node]: https://img.shields.io/node/v/cache-loader.svg\n[node-url]: https://nodejs.org\n\n[deps]: https://david-dm.org/webpack-contrib/worker-loader.svg\n[deps-url]: https://david-dm.org/webpack-contrib/worker-loader\n\n[test]: http://img.shields.io/travis/webpack-contrib/worker-loader.svg\n[test-url]: https://travis-ci.org/webpack-contrib/worker-loader\n\n[cover]: https://codecov.io/gh/webpack-contrib/cache-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/cache-loader\n\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/worker-loader/-/worker-loader-2.0.0.tgz#45fda3ef76aca815771a89107399ee4119b430ac",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/worker-loader/-/worker-loader-2.0.0.tgz",
    "hash": "45fda3ef76aca815771a89107399ee4119b430ac",
    "integrity": "sha512-tnvNp4K3KQOpfRnD20m8xltE3eWh89Ye+5oj7wXEEHKac1P4oZ6p9oTj8/8ExqoSBnk9nu5Pr4nKfQ1hn2APJw==",
    "registry": "npm",
    "packageName": "worker-loader",
    "cacheIntegrity": "sha512-tnvNp4K3KQOpfRnD20m8xltE3eWh89Ye+5oj7wXEEHKac1P4oZ6p9oTj8/8ExqoSBnk9nu5Pr4nKfQ1hn2APJw== sha1-Rf2j73asqBV3GokQc5nuQRm0MKw="
  },
  "registry": "npm",
  "hash": "45fda3ef76aca815771a89107399ee4119b430ac"
}