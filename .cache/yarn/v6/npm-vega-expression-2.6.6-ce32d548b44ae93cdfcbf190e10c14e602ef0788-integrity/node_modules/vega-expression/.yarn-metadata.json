{
  "manifest": {
    "name": "vega-expression",
    "version": "2.6.6",
    "description": "Vega expression parser and code generator.",
    "keywords": [
      "vega",
      "expression",
      "parser",
      "codegen"
    ],
    "author": {
      "name": "Jeffrey Heer",
      "url": "http://idl.cs.washington.edu"
    },
    "license": "BSD-3-Clause",
    "main": "build/vega-expression.js",
    "module": "index",
    "types": "index.d.ts",
    "repository": {
      "type": "git",
      "url": "https://github.com/vega/vega.git"
    },
    "scripts": {
      "rollup": "rollup -f umd -g vega-util:vega -n vega -o build/vega-expression.js -- index.js",
      "prebuild": "rimraf build && mkdir build",
      "build": "yarn rollup",
      "postbuild": "terser build/vega-expression.js -c -m -o build/vega-expression.min.js",
      "pretest": "yarn prebuild && yarn rollup",
      "test": "tape 'test/**/*-test.js'",
      "prepublishOnly": "yarn test && yarn build",
      "postpublish": "git push && git push --tags"
    },
    "dependencies": {
      "vega-util": "^1.15.0"
    },
    "gitHead": "28db83352e43e321dfe55fc5cb6489b211e45662",
    "_registry": "npm",
    "_loc": "/home/jovyan/.cache/yarn/v6/npm-vega-expression-2.6.6-ce32d548b44ae93cdfcbf190e10c14e602ef0788-integrity/node_modules/vega-expression/package.json",
    "readmeFilename": "README.md",
    "readme": "# vega-expression\n\n[Vega](https://github.com/vega/vega) expression parser and code generator.\n\nParses a limited subset of JavaScript expressions into an abstract syntax tree, and provides code generation utilities for generating `eval`'able output code. The parser recognizes basic JavaScript expressions, but does not allow assignment operators, `new` expressions, or control flow statements (`for`, `while`, `switch`, etc). The configurable code generator further limits the set of allowable function invocations and variable names. The goal is to provide simple, expressive, and security-conscious expression evaluation.\n\nSee the [Vega expression language documentation](https://vega.github.io/vega/docs/expressions/) for more details about supported JavaScript expressions, and see below for the constants and functions provided by this package. All other functions are provided by the [vega-functions](https://github.com/vega/vega/blob/master/packages/vega-functions/) package.\n\n## API Reference\n\n<a name=\"parse\" href=\"#parse\">#</a>\n<b>parse</b>(<i>expression</i>)\n[<>](https://github.com/vega/vega/blob/master/packages/vega-expression/src/parser.js \"Source\")\n\nParse the JavaScript *expression* string and return the resulting abstract syntax tree in the [ESTree format](https://github.com/estree/estree). The parser is a stripped-down version of the [Esprima](http://esprima.org/) parser.\n\n<a name=\"codegen\" href=\"#codegen\">#</a>\n<b>codegen</b>(<i>options</i>)\n[<>](https://github.com/vega/vega/blob/master/packages/vega-expression/src/codegen.js \"Source\")\n\nCreate a new output code generator configured according to the provided options. The resulting generator function accepts a parsed AST as input and returns `eval`'able JavaScript code as output. The output is an object hash with the properties `code` (the generated code as a string), `fields` (a hash of all properties referenced within the _fieldvar_ scope), and `globals` (a hash of all properties referenced outside a provided whitelist).\n\nThe supported _options_ include:\n\n- *constants*: A hash of allowed top-level constant values. This object maps from constant names to constant values. The constant values are strings that will be injected as-is into generated code. If this option is not specified, the [constants](#constants) object is used by default.\n\n- *functions*: A function that is given an AST visitor instance as input and returns an object of allowed functions. The resulting object maps from\nfunction names to function values. The values may either be strings (which will be injected as-is into generated code and subsequently appended with arguments) or functions (which take an array of argument AST nodes as input and return generated code to inject). If this option is not specified, the [functions](#functions) method is used by default.\n\n- *blacklist*: An array of variable names that may **not** be referenced within the expression scope. These may correspond to disallowed global variables.\n\n- *whitelist*: An array of variable names that may be referenced within the expression scope. These typically correspond to function parameter names for the expression. Variable names not included in the white list will be collected as global variables (see *globalvar* below).\n\n- *fieldvar*: The name of the primary data input argument within the generated expression function. For example, in the function `function(d) { return d.x * d.y; }`, the variable `d` serves as the field variable, and `x` and `y` are it's accessed properties. All properties accessed under the scope of _fieldvar_ will be tracked by the code generator and returned as part of the output. This is necessary to perform dependency tracking of referenced data fields.\n\n- *globalvar*: (Required) The name of the variable upon which to lookup global variables. This variable name will be included in the generated code as the scope for any global variable references. Alternatively, this property can be a function that maps from variable names in the source input to generated code to write to the output.\n\n<a name=\"constants\" href=\"#constants\">#</a>\n<b>constants</b>\n[<>](https://github.com/vega/vega/blob/master/packages/vega-expression/src/constants.js \"Source\")\n\nAn object defining default constant values for the Vega expression language. The object maps from constant identifiers to JavaScript code to defining the constant value (for example, `'PI'` maps to `'Math.PI`').\n\n<a name=\"functions\" href=\"#functions\">#</a>\n<b>functions</b>(<i>codegen</i>)\n[<>](https://github.com/vega/vega/blob/master/packages/vega-expression/src/functions.js \"Source\")\n\nGiven a *codegen* instance (generated by the [codegen](#codegen) method) as input, returns an object defining all valid function names for use within an expression. The resulting object maps from function names to function values. The values may either be strings (which will be injected as-is into generated code and subsequently appended with arguments) or functions (which take an array of argument AST nodes as input and return generated code to inject).\n\n<a name=\"ASTNode\" href=\"#ASTNode\">#</a>\n<b>ASTNode</b>(<i>type</i>)\n[<>](https://github.com/vega/vega/blob/master/packages/vega-expression/src/ast.js \"Source\")\n\nConstructor for a node in an expression abstract syntax tree (AST). Accepts a *type* string as input, which then become the `type` property of the resulting node. AST nodes also support a `visit` method which takes a visitor function as input in order to traverse the AST for static analysis.\n\n## Provided Constants and Functions\n\nThis package provides the following constants and functions:\n\n**Constants**\n\n- [`NaN`](https://vega.github.io/vega/docs/expressions/#NaN)\n- [`E`](https://vega.github.io/vega/docs/expressions/#E)\n- [`LN2`](https://vega.github.io/vega/docs/expressions/#LN2)\n- [`LN10`](https://vega.github.io/vega/docs/expressions/#LN10)\n- [`LOG2E`](https://vega.github.io/vega/docs/expressions/#LOG2E)\n- [`LOG10E`](https://vega.github.io/vega/docs/expressions/#LOG10E)\n- [`PI`](https://vega.github.io/vega/docs/expressions/#PI)\n- [`SQRT1_2`](https://vega.github.io/vega/docs/expressions/#SQRT1_2)\n- [`SQRT2`](https://vega.github.io/vega/docs/expressions/#SQRT2)\n- [`MIN_VALUE`](https://vega.github.io/vega/docs/expressions/#MIN_VALUE)\n- [`MAX_VALUE`](https://vega.github.io/vega/docs/expressions/#MAX_VALUE)\n\n**Math Functions**\n\n- [`isNaN`](https://vega.github.io/vega/docs/expressions/#isNaN)\n- [`isFinite`](https://vega.github.io/vega/docs/expressions/#isFinite)\n- [`abs`](https://vega.github.io/vega/docs/expressions/#abs)\n- [`acos`](https://vega.github.io/vega/docs/expressions/#acos)\n- [`asin`](https://vega.github.io/vega/docs/expressions/#asin)\n- [`atan`](https://vega.github.io/vega/docs/expressions/#atan)\n- [`atan2`](https://vega.github.io/vega/docs/expressions/#atan2)\n- [`ceil`](https://vega.github.io/vega/docs/expressions/#ceil)\n- [`cos`](https://vega.github.io/vega/docs/expressions/#cos)\n- [`exp`](https://vega.github.io/vega/docs/expressions/#exp)\n- [`floor`](https://vega.github.io/vega/docs/expressions/#floor)\n- [`log`](https://vega.github.io/vega/docs/expressions/#log)\n- [`max`](https://vega.github.io/vega/docs/expressions/#max)\n- [`min`](https://vega.github.io/vega/docs/expressions/#min)\n- [`pow`](https://vega.github.io/vega/docs/expressions/#pow)\n- [`random`](https://vega.github.io/vega/docs/expressions/#random)\n- [`round`](https://vega.github.io/vega/docs/expressions/#round)\n- [`sin`](https://vega.github.io/vega/docs/expressions/#sin)\n- [`sqrt`](https://vega.github.io/vega/docs/expressions/#sqrt)\n- [`tan`](https://vega.github.io/vega/docs/expressions/#tan)\n- [`clamp`](https://vega.github.io/vega/docs/expressions/#clamp)\n\n**Date/Time Functions**\n\n- [`now`](https://vega.github.io/vega/docs/expressions/#now)\n- [`utc`](https://vega.github.io/vega/docs/expressions/#utc)\n- [`datetime`](https://vega.github.io/vega/docs/expressions/#datetime)\n- [`date`](https://vega.github.io/vega/docs/expressions/#date)\n- [`day`](https://vega.github.io/vega/docs/expressions/#day)\n- [`year`](https://vega.github.io/vega/docs/expressions/#year)\n- [`month`](https://vega.github.io/vega/docs/expressions/#month)\n- [`hours`](https://vega.github.io/vega/docs/expressions/#hours)\n- [`minutes`](https://vega.github.io/vega/docs/expressions/#minutes)\n- [`seconds`](https://vega.github.io/vega/docs/expressions/#seconds)\n- [`milliseconds`](https://vega.github.io/vega/docs/expressions/#milliseconds)\n- [`time`](https://vega.github.io/vega/docs/expressions/#time)\n- [`timezoneoffset`](https://vega.github.io/vega/docs/expressions/#timezoneoffset)\n- [`utcdate`](https://vega.github.io/vega/docs/expressions/#utcdate)\n- [`utcday`](https://vega.github.io/vega/docs/expressions/#utcday)\n- [`utcyear`](https://vega.github.io/vega/docs/expressions/#utcyear)\n- [`utcmonth`](https://vega.github.io/vega/docs/expressions/#utcmonth)\n- [`utchours`](https://vega.github.io/vega/docs/expressions/#utchours)\n- [`utcminutes`](https://vega.github.io/vega/docs/expressions/#utcminutes)\n- [`utcseconds`](https://vega.github.io/vega/docs/expressions/#utcseconds)\n- [`utcmilliseconds`](https://vega.github.io/vega/docs/expressions/#utcmilliseconds)\n\n**Sequence (Array or String) Functions**\n\n- [`length`](https://vega.github.io/vega/docs/expressions/#length)\n- [`join`](https://vega.github.io/vega/docs/expressions/#join)\n- [`indexof`](https://vega.github.io/vega/docs/expressions/#indexof)\n- [`lastindexof`](https://vega.github.io/vega/docs/expressions/#lastindexof)\n- [`reverse`](https://vega.github.io/vega/docs/expressions/#reverse)\n- [`slice`](https://vega.github.io/vega/docs/expressions/#slice)\n\n**String Functions**\n\n- [`parseFloat`](https://vega.github.io/vega/docs/expressions/#parseFloat)\n- [`parseInt`](https://vega.github.io/vega/docs/expressions/#parseInt)\n- [`upper`](https://vega.github.io/vega/docs/expressions/#upper)\n- [`lower`](https://vega.github.io/vega/docs/expressions/#lower)\n- [`replace`](https://vega.github.io/vega/docs/expressions/#replace)\n- [`split`](https://vega.github.io/vega/docs/expressions/#split)\n- [`substring`](https://vega.github.io/vega/docs/expressions/#substring)\n- [`trim`](https://vega.github.io/vega/docs/expressions/#trim)\n\n**RegExp Functions**\n\n- [`regexp`](https://vega.github.io/vega/docs/expressions/#regexp)\n- [`test`](https://vega.github.io/vega/docs/expressions/#test)\n\n",
    "licenseText": "Copyright (c) 2015-2018, University of Washington Interactive Data Lab\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n  may be used to endorse or promote products derived from this software\n  without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/vega-expression/-/vega-expression-2.6.6.tgz#ce32d548b44ae93cdfcbf190e10c14e602ef0788",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/vega-expression/-/vega-expression-2.6.6.tgz",
    "hash": "ce32d548b44ae93cdfcbf190e10c14e602ef0788",
    "integrity": "sha512-zxPzXO33FawU3WQHRmHJaRreyJlyMaNMn1uuCFSouJttPkBBWB5gCrha2f5+pF3t4NMFWTnSrgCkR6mcaubnng==",
    "registry": "npm",
    "packageName": "vega-expression",
    "cacheIntegrity": "sha512-zxPzXO33FawU3WQHRmHJaRreyJlyMaNMn1uuCFSouJttPkBBWB5gCrha2f5+pF3t4NMFWTnSrgCkR6mcaubnng== sha1-zjLVSLRK6Tzfy/GQ4QwU5gLvB4g="
  },
  "registry": "npm",
  "hash": "ce32d548b44ae93cdfcbf190e10c14e602ef0788"
}